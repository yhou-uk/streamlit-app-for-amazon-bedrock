AWSTemplateFormatVersion: '2010-09-09'
Description: Codepipeline for Streamlit App

Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Environment Configuration'
      Parameters:
      - CodeCommitURL
      - RepoName
      - EnvironmentName
      - DeployVPCInfrastructure

Parameters:
  CodeCommitURL:
    Type: String
    Description: Code Commit repository link
    Default: ""
    
  RepoName:
    Type: String
    Description: Code Commit repository name
    Default: ""

  EnvironmentName:
    Description: (containing letters or numbers) Unique name to distinguish different web application in the same AWS account- min length 1 and max length 4
    Type: String
    MinLength: 1
    MaxLength: 4

  DeployVPCInfrastructure:
    Description: Select false if you already have infrastructure.yaml nested stack deployed in this region
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'

Conditions:
  IsDeployVPCInfrastructure: !Equals 
    - !Ref DeployVPCInfrastructure
    - 'true'
  
  NotDeployVPCInfrastructure: !Equals 
    - !Ref DeployVPCInfrastructure
    - 'false'


Resources:
  # VPC Infrastructure
  Infrastructure:
    Condition: IsDeployVPCInfrastructure
    DeletionPolicy: Retain
    DependsOn: StreamlitBuildCustomResource
    Description: Stack to created basic app infrastructure
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://s3.amazonaws.com/${StreamlitCodeS3Bucket}/infrastructure.yaml
      Parameters:
        EnvironmentName: !Ref EnvironmentName
  
  # Container Repository
  StreamlitImageRepo:
    Type: AWS::ECR::Repository
    Properties:
      EmptyOnDelete: true
  
  # Artifact Bucket
  StreamlitArtifactStore:
    Type: AWS::S3::Bucket
    Properties:
      LoggingConfiguration:
        DestinationBucketName: !If [IsDeployVPCInfrastructure, !GetAtt Infrastructure.Outputs.LoggingBucket, !ImportValue Basic-LoggingBucket]
        LogFilePrefix: !Sub artifact-${EnvironmentName}-logs   

  StreamlitArtifactStorePolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StreamlitArtifactStore
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Sid: DenyUnEncryptedObjectUploads
            Effect: Deny
            Principal: '*'
            Action: s3:PutObject
            Resource: !Join [ '', [ !GetAtt StreamlitArtifactStore.Arn, '/*' ] ]
            Condition:
              StringNotEquals: 
                s3:x-amz-server-side-encryption: aws:kms
          -
            Sid: DenyInsecureConnections
            Effect: Deny
            Principal: '*'
            Action: s3:*
            Resource: !Join [ '', [ !GetAtt StreamlitArtifactStore.Arn, '/*' ] ]
            Condition:
              Bool:
                aws:SecureTransport: false
  
  # CodeBucket
  StreamlitCodeS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
    
  # delete S3 bucket when delete the whole stack  
  StreamlitArtifactStoreDeleter:
    Type: AwsCommunity::S3::DeleteBucketContents
    Properties:
      BucketName: !Ref StreamlitArtifactStore
      
  StreamlitCodeS3BucketDeleter:
    Type: AwsCommunity::S3::DeleteBucketContents
    Properties:
      BucketName: !Ref StreamlitCodeS3Bucket  

  # Code Build Initial
  StreamlitInitBuildRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ['-', ['StreamlitInitBuildRole', !Ref EnvironmentName]]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'codebuild.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: "/"
      Policies:
        - PolicyName: 'CreateResources'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                Resource:
                  - !Sub "arn:aws:s3:::${StreamlitCodeS3Bucket}/*"
              - Effect: 'Allow'
                Action:
                  - 'kms:Encrypt'
                  - 'kms:Decrypt'
                  - 'kms:CreateGrant'
                  - 'kms:DescribeKey'
                Resource: "*"
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:PutRetentionPolicy'
                Resource: '*'
              - Effect: 'Allow'
                Action:
                  - 'lambda:AddPermission'
                  - 'lambda:CreateFunction'
                Resource: '*'
              - Effect: 'Allow'
                Action:
                  - 'iam:AttachRolePolicy'
                  - 'iam:PutRolePolicy'
                  - 'iam:CreatePolicy'
                  - 'iam:CreateRole'
                  - 'iam:PassRole'
                Resource: '*'
              - Effect: 'Allow'
                Action:
                  - 'sts:GetCallerIdentity'
                Resource: '*'
              - Effect: 'Allow'
                Action:
                  - 'codecommit:GetBranch'
                  - 'codecommit:GetCommit'
                  - 'codecommit:GetRepository'
                  - 'codecommit:GitPull'
                Resource: '*'

  StreamlitInitCodebuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Join ['-', ['StreamlitInitCodebuild', !Ref EnvironmentName]]
      Source:
        Type: CODECOMMIT
        Location: !Ref CodeCommitURL
        BuildSpec: 
          !Sub
            - |
              version: 0.2
              phases:
                pre_build:
                  commands:
                    - pip3 install awscli --upgrade --user
                build:
                  commands:
                    - echo Build started on `date`
                    - aws s3 cp infrastructure.yaml s3://${StreamlitCodeS3Bucket}
                    - zip -r app.zip .
                post_build:
                  commands:
                    - echo Build completed on `date`
                    - aws s3 cp app.zip s3://${StreamlitCodeS3Bucket}
            - { 
                StreamlitCodeS3Bucket: !Ref StreamlitCodeS3Bucket
              }
      # SourceVersion: branch
      Environment:
        Type: LINUX_CONTAINER
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        ComputeType: BUILD_GENERAL1_SMALL
      ServiceRole: !GetAtt StreamlitInitBuildRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
  
  
  # Start initial codebuild
  StreamlitBuildCustomResourceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['-', ['BuildResourceRole', !Ref EnvironmentName]]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/"
      Policies:
        - PolicyName: LambdaCustomPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource:
                  - !GetAtt StreamlitInitCodebuild.Arn
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:PutRetentionPolicy'
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:DeleteObject
                  - s3:DeleteObjectVersion
                  - s3:ListBucketVersions
                Resource:
                  - !Sub arn:aws:s3:::${StreamlitCodeS3Bucket}/*
                  - !Sub arn:aws:s3:::${StreamlitCodeS3Bucket}
  
  StreamlitBuildCustomResourceFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Join ['-', ['BuildResourceF', !Ref EnvironmentName]]
      Handler: index.handler
      Role: !GetAtt StreamlitBuildCustomResourceRole.Arn
      Timeout: 600
      Runtime: python3.12
      Code:
        ZipFile: !Sub |
                import boto3
                from time import sleep
                import cfnresponse

                codebuild = boto3.client("codebuild")

                def handler(event, context):
                  try:
                    request_type = event['RequestType']
                    if request_type == 'Create':
                      status = 'STARTING'
                      
                      build_id = codebuild.start_build(projectName=event['ResourceProperties']['PROJECT'])['build']['id']
                      while status not in ['SUCCEEDED', 'FAILED', 'STOPPED', 'FAULT', 'TIMED_OUT']:
                        status = codebuild.batch_get_builds(ids=[build_id])['builds'][0]['buildStatus']
                        sleep(15)
                      if status in ['FAILED', 'STOPPED', 'FAULT', 'TIMED_OUT']:
                        print("Initial CodeBuild failed")
                        # build_id = codebuild.start_build(projectName=event['ResourceProperties']['CLEANPROJECT'])['build']['id']
                        # sleep(120)
                        cfnresponse.send(event, context, cfnresponse.FAILED, {})
                        return
                    elif request_type == 'Delete':
                      bucket = boto3.resource("s3").Bucket(event['ResourceProperties']['CODEBUCKET'])
                      bucket.object_versions.delete()
                      bucket.objects.all().delete()

                  except Exception as ex:
                    print(ex)
                    # build_id = codebuild.start_build(projectName=event['ResourceProperties']['CLEANPROJECT'])['build']['id']
                    # sleep(120)
                    bucket = boto3.resource("s3").Bucket(event['ResourceProperties']['CODEBUCKET'])
                    bucket.object_versions.delete()
                    bucket.objects.all().delete()
                    cfnresponse.send(event, context, cfnresponse.FAILED, {})
                  else:
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, {})

  StreamlitBuildCustomResource:
    Type: Custom::BuildCode
    Properties:
      ServiceToken: !GetAtt StreamlitBuildCustomResourceFunction.Arn
      PROJECT: !Ref StreamlitInitCodebuild
      CODEBUCKET: !Ref StreamlitCodeS3Bucket

      

  # CodePipeline Roles
  StreamlitCodeBuildExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ['-', ['StreamlitCodeBuildRole', !Ref EnvironmentName]]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'codebuild.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - !If [IsDeployVPCInfrastructure, !GetAtt Infrastructure.Outputs.LogsPolicy, !ImportValue Basic-LogsPolicy]
      Policies:
        - PolicyName: 'CodeBuildPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'ecr:GetAuthorizationToken'
                Resource:
                  - '*'
              - Effect: 'Allow'
                Action:
                  - 'ecr:UploadLayerPart'
                  - 'ecr:PutImage'
                  - 'ecr:InitiateLayerUpload'
                  - 'ecr:CompleteLayerUpload'
                  - 'ecr:BatchCheckLayerAvailability'
                Resource:
                  - !GetAtt StreamlitImageRepo.Arn
              - Effect: 'Allow'
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource:
                  - !Sub "arn:aws:s3:::${StreamlitArtifactStore}/*"
              - Effect: 'Allow'
                Action:
                  - 'codecommit:GetBranch'
                  - 'codecommit:GetCommit'
                  - 'codecommit:GetRepository'
                  - 'codecommit:GitPull'
                Resource: '*'
  
  StreamlitCodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['-', ['StreamlitCodePipelineRole', !Ref EnvironmentName]]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        -
          PolicyName: AWS-CodePipeline-Service-3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource: !GetAtt StreamlitCodeBuild.Arn
              -
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:ListFunctions
                Resource: !GetAtt InvalidateCacheFunction.Arn
              -
                Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !GetAtt StreamlitCloudformationExecutionRole.Arn
              -
                Effect: Allow
                Action:
                  - cloudformation:UpdateStack
                  - cloudformation:DescribeStacks
                  - cloudformation:CreateStack
                Resource: !Sub 
                          - |-
                            arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${StackName}/*
                          - {
                              StackName: !Join ['', [!Sub '${AWS::StackName}', 'deploy', !Ref EnvironmentName]]
                            }
              -
                Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !Sub arn:aws:s3:::${StreamlitCodeS3Bucket}/*
                  - !Sub arn:aws:s3:::${StreamlitCodeS3Bucket}
                  - !Sub arn:aws:s3:::${StreamlitArtifactStore}/*
                  - !Sub arn:aws:s3:::${StreamlitArtifactStore}
              - Effect: 'Allow'
                Action:
                  - 'codecommit:CancelUploadArchive'
                  - 'codecommit:GetBranch'
                  - 'codecommit:GetCommit'
                  - 'codecommit:GetUploadArchiveStatus'
                  - 'codecommit:UploadArchive'
                Resource: '*'
  
  StreamlitCloudformationExecutionRole:
    DeletionPolicy: Retain
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - !If [IsDeployVPCInfrastructure, !GetAtt Infrastructure.Outputs.LogsPolicy, !ImportValue Basic-LogsPolicy]
      Policies:
        - PolicyName: 'CloudFormationPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'iam:ListRolePolicies'
                  - 'iam:ListAttachedRolePolicies'
                  - 'iam:CreateServiceLinkedRole'
                  - 'iam:CreateRole'
                  - 'iam:GetRolePolicy'
                  - 'iam:GetRole'
                  - 'iam:AttachRolePolicy'
                  - 'iam:PutRolePolicy'
                  - 'iam:DetachRolePolicy'
                  - 'iam:DeleteRole'
                  - 'iam:DeleteRolePolicy'
                  - 'iam:PassRole'
                  - 'sts:AssumeRole'
                Resource:
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/StreamlitScalingRole-${EnvironmentName}
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/StreamlitExecutionRole-${EnvironmentName}
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/StreamlitECSTaskRole-${EnvironmentName}
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/ECSCustomRole-${EnvironmentName}
              - Effect: 'Allow'
                Action:
                  - 's3:GetBucketAcl'
                  - 's3:PutBucketAcl'
                Resource:
                  - !Sub 
                      - 'arn:aws:s3:::${LoggingBucket}'
                      - LoggingBucket: !If [IsDeployVPCInfrastructure, !GetAtt Infrastructure.Outputs.LoggingBucket, !ImportValue Basic-LoggingBucket]
                  - !Sub 
                      - 'arn:aws:s3:::${LoggingBucket}/*'
                      - LoggingBucket: !If [IsDeployVPCInfrastructure, !GetAtt Infrastructure.Outputs.LoggingBucket, !ImportValue Basic-LoggingBucket]
              - Effect: 'Allow'
                Action:
                  - 'ecs:DeregisterTaskDefinition'
                  - 'ecs:RegisterTaskDefinition'
                Resource:
                  - '*'
              - Effect: 'Allow'
                Action:                  
                  - 'ecs:DescribeClusters'
                  - 'ecs:DescribeServices'
                  - 'ecs:CreateService'
                  - 'ecs:UpdateService'
                  - 'ecs:DeleteService'
                Resource:
                  - !Sub 
                      - arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${StreamlitClusterName}
                      - StreamlitClusterName: !If [IsDeployVPCInfrastructure, !GetAtt Infrastructure.Outputs.StreamlitCluster, !ImportValue StreamlitCluster]
                  - !Sub 
                      - arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:service/${StreamlitClusterName}/StreamlitECSService-${EnvironmentName}
                      - StreamlitClusterName: !If [IsDeployVPCInfrastructure, !GetAtt Infrastructure.Outputs.StreamlitCluster, !ImportValue StreamlitCluster]
              - Effect: 'Allow'
                Action:
                  - 'lambda:GetRuntimeManagementConfig'
                  - 'lambda:GetFunctionCodeSigningConfig'
                  - 'lambda:GetFunction'
                  - 'lambda:CreateFunction'
                  - 'lambda:DeleteFunction'
                  - 'lambda:InvokeFunction'
                Resource:
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:ECSCustomF-${EnvironmentName}
              - Effect: 'Allow'
                Action:
                  - 'cloudfront:ListDistributions'
                Resource:
                  - '*'
              - Effect: 'Allow'
                Action:
                  - 'cloudfront:CreateDistribution'
                  - 'cloudfront:GetDistribution'
                  - 'cloudfront:DeleteDistribution'
                  - 'cloudfront:UpdateDistribution'
                  - 'cloudfront:TagResource'
                Resource:
                  - '*'
                Condition:
                  StringEquals:
                    'aws:ResourceTag/CloudfrontStreamlitApp': !Sub '${AWS::StackName}deploy${EnvironmentName}-Cloudfront'
              - Effect: 'Allow'
                Action:
                  - 'application-autoscaling:DescribeScalableTargets'
                  - 'application-autoscaling:DescribeScalingPolicies'
                  - 'application-autoscaling:RegisterScalableTarget'
                  - 'application-autoscaling:DeregisterScalableTarget'
                Resource: 
                  - !Sub arn:aws:application-autoscaling:${AWS::Region}:${AWS::AccountId}:scalable-target/*
              - Effect: 'Allow'
                Action:              
                  - 'application-autoscaling:PutScalingPolicy'
                  - 'application-autoscaling:DeleteScalingPolicy'
                Resource:
                  - !Sub arn:aws:application-autoscaling:${AWS::Region}:${AWS::AccountId}:scalable-target/*
              - Effect: 'Allow'
                Action:
                  - 'autoscaling:PutScalingPolicy'
                  - 'autoscaling:DescribeScheduledActions'
                Resource:
                  - '*'
              - Effect: 'Allow'
                Action:
                  - 'wafv2:CreateWebACL'
                Resource:
                  - '*'
              - Effect: 'Allow'
                Action:                  
                  - 'wafv2:GetWebACL'
                  - 'wafv2:DeleteWebACL'
                  - 'wafv2:ListTagsForResource'
                Resource:
                  - !Sub arn:aws:wafv2:${AWS::Region}:${AWS::AccountId}:*/webacl/CloudFrontWebACL${EnvironmentName}/*     
              - Effect: 'Allow'
                Action:                  
                  - 'ec2:CreateSecurityGroup'
                  - 'ec2:DescribeSecurityGroups'
                  - 'ec2:CreateTags'
                Resource:
                  - "*"        
              - Effect: 'Allow'
                Action:                  
                  - 'ec2:DeleteSecurityGroup'
                  - 'ec2:AuthorizeSecurityGroupIngress'
                Resource:
                  - "*"
                Condition:
                  StringEquals:
                    'aws:ResourceTag/aws:cloudformation:logical-id': 'StreamlitALBSecurityGroup'
              - Effect: 'Allow'
                Action:                  
                  - 'ec2:DeleteSecurityGroup'
                  - 'ec2:AuthorizeSecurityGroupIngress'
                Resource:
                  - "*"
                Condition:                 
                  StringEquals:
                    'aws:ResourceTag/aws:cloudformation:logical-id': 'StreamlitContainerSecurityGroup'
              - Effect: 'Allow'
                Action:                  
                  - 'elasticloadbalancing:DeleteLoadBalancer'
                  - 'elasticloadbalancing:DeleteListener'
                  - 'elasticloadbalancing:DeleteRule'
                  - 'elasticloadbalancing:DeleteTargetGroup'
                Resource:
                  - !Sub arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:targetgroup/StreamlitContainerTG-${EnvironmentName}/*
                  - !Sub arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:loadbalancer/app/StreamlitALB-${EnvironmentName}/*
                  - !Sub arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:listener/app/StreamlitALB-${EnvironmentName}/*/*
                  - !Sub arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:listener-rule/app/StreamlitALB-${EnvironmentName}/*/*/*
              - Effect: 'Allow'
                Action:                  
                  - 'elasticloadbalancing:CreateLoadBalancer'
                  - 'elasticloadbalancing:CreateListener'
                  - 'elasticloadbalancing:CreateRule'
                  - 'elasticloadbalancing:CreateTargetGroup'
                  - 'elasticloadbalancing:DescribeTargetGroups'
                  - 'elasticloadbalancing:DescribeListeners'
                  - 'elasticloadbalancing:DescribeLoadBalancers'
                  - 'elasticloadbalancing:DescribeRules'
                  - 'elasticloadbalancing:ModifyLoadBalancerAttributes'
                Resource:
                  - "*"

  # CodeBuild CodePipeline
  StreamlitCodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Join ['-', ['StreamlitCodeBuild', !Ref EnvironmentName]]
      Description: CodeBuild for Code Pipeline
      Cache:
        Location: LOCAL
        Modes:
          - LOCAL_SOURCE_CACHE
          - LOCAL_DOCKER_LAYER_CACHE
        Type: LOCAL
      Artifacts: 
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: 
          !Sub
            - |
              version: 0.2
              phases:
                pre_build:
                  commands:
                    - pip3 install awscli 
                    - aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
                    - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
                    - COMMIT_HASH=${!COMMIT_HASH//./a}
                    - IMAGE_TAG=${!COMMIT_HASH:=latest}
                build:
                  commands:
                    - echo Build started on `date`
                    - printf '\n' >> Dockerfile
                    - printf 'ENTRYPOINT ["streamlit", "run", "app.py", "--server.port=80", "--", "--environmentName", "${EnvironmentName}"]' >> Dockerfile
                    - cat Dockerfile
                    - docker build -t ${StreamlitImageRepo} .
                    - docker tag ${StreamlitImageRepo}:latest ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${StreamlitImageRepo}:$IMAGE_TAG
                post_build:
                  commands:
                    - echo Build completed on `date`
                    - docker push ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${StreamlitImageRepo}:$IMAGE_TAG
                    - printf  '{"StreamLitImageURI":"%s"}' ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${StreamlitImageRepo}:$IMAGE_TAG > imageDetail.json
              artifacts:
                files:
                  - imageDetail.json
            - { 
                StreamlitImageRepo: !Ref StreamlitImageRepo
              }
      Environment:
        Type: LINUX_CONTAINER
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        ComputeType: BUILD_GENERAL1_SMALL
      ServiceRole: !GetAtt StreamlitCodeBuildExecutionRole.Arn
      TimeoutInMinutes: 10
  
  StreamlitCodeBuildLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/codebuild/${StreamlitCodeBuild}"
      RetentionInDays: 7

  # Invalidate cache
  InvalidateCacheFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['-', ['InvalidateCacheRole', !Ref EnvironmentName]]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/"
      ManagedPolicyArns:
        - !If [IsDeployVPCInfrastructure, !GetAtt Infrastructure.Outputs.LogsPolicy, !ImportValue Basic-LogsPolicy]
      Policies:
        - PolicyName: LambdaCustomPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codepipeline:PutJobFailureResult
                  - codepipeline:PutJobSuccessResult
                  - cloudfront:CreateInvalidation
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectAcl
                  - s3:ListBucket
                Resource: 
                  - !Sub "arn:aws:s3:::${StreamlitArtifactStore}/*"

  InvalidateCacheFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Join ['-', ['InvalidateCache', !Ref EnvironmentName]]
      Handler: index.handler
      Role: !GetAtt InvalidateCacheFunctionRole.Arn
      Timeout: 300
      Runtime: python3.12
      Code:
        ZipFile: !Sub |
            import json
            import boto3
            import zipfile
            import os

            code_pipeline = boto3.client("codepipeline")
            cloud_front = boto3.client("cloudfront")
            s3 = boto3.client('s3')

            def get_input_artifacts(inputArtifacts):
              bucketName = inputArtifacts["location"]["s3Location"]["bucketName"]
              objectKey = inputArtifacts["location"]["s3Location"]["objectKey"]
              
              s3.download_file(bucketName, objectKey, "/tmp/file.zip")
              
              with zipfile.ZipFile("/tmp/file.zip", 'r') as zip_ref:
                  zip_ref.extractall("/tmp/extracted")
              
              json_file_path = os.path.join("/tmp/extracted", 'CreateStackOutput.json')
              with open(json_file_path, 'r') as json_file:
                  json_data = json.loads(json_file.read())
                  # You can now use json_data as needed
              return json_data["CloudfrontID"]
                

            def handler(event, context):
                job_id = event["CodePipeline.job"]["id"]
                try:
                    CloudfrontID = get_input_artifacts(event["CodePipeline.job"]["data"]["inputArtifacts"][0])
            
                    cloud_front.create_invalidation(
                        DistributionId=CloudfrontID,
                        InvalidationBatch={
                            "Paths": {
                                "Quantity": 1,
                                "Items": ["/*"],
                            },
                            "CallerReference": event["CodePipeline.job"]["id"],
                        },
                    )
                except Exception as e:
                    code_pipeline.put_job_failure_result(
                        jobId=job_id,
                        failureDetails={
                            "type": "JobFailed",
                            "message": str(e),
                        },
                    )
                else:
                    code_pipeline.put_job_success_result(
                        jobId=job_id,
                    )

  # CodePipeline with Infra
  StreamlitCodePipeLineInfra:
    Type: AWS::CodePipeline::Pipeline
    Condition: IsDeployVPCInfrastructure
    DependsOn: Infrastructure
    Properties:
      Name: !Join ['-', ['StreamlitCodePipeLine', !Ref EnvironmentName]]
      ArtifactStore: 
        Location: !Ref StreamlitArtifactStore
        Type: S3
      RestartExecutionOnUpdate: False
      RoleArn: !GetAtt StreamlitCodePipelineServiceRole.Arn
      Stages: 
        - Name: Source
          Actions:
          - Name: SourceAction
            ActionTypeId:
              Category: Source
              Owner: AWS
              Provider: CodeCommit
              Version: 1
            Configuration:
              RepositoryName: !Ref RepoName
              BranchName: master
              PollForSourceChanges: false
            RunOrder: 1
            OutputArtifacts:
              - Name: source-output-artifacts
        # Build the project using the BuildProject and Output build artifacts to build-output-artifacts path in S3 Bucket
        - Name: Build
          Actions:
          - Name: Build
            ActionTypeId:
              Category: Build
              Owner: AWS
              Version: 1
              Provider: CodeBuild
            OutputArtifacts:
              - Name: build-output-artifacts
            InputArtifacts:
              - Name: source-output-artifacts
            Configuration:
                ProjectName: !Ref StreamlitCodeBuild
            RunOrder: 1

        # Deploy the project by executing Fargate-Cluster.yml file in the Source code with Cloudformation.
        - Name: InfrastructureDeploy
          Actions:
          - Name: Deploy
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Version: 1
              Provider: CloudFormation
            InputArtifacts:
              - Name: source-output-artifacts
              - Name: build-output-artifacts
            OutputArtifacts:
              - Name: cfn-output-artifacts
            Configuration:
              OutputFileName: CreateStackOutput.json
              ActionMode: CREATE_UPDATE
              Capabilities: CAPABILITY_NAMED_IAM
              ParameterOverrides: !Sub 
                  - | 
                    {"StreamLitImageURI" : { "Fn::GetParam" : ["build-output-artifacts", "imageDetail.json", "StreamLitImageURI"] },"StreamlitCluster": "${Cluster}","EnvironmentName": "${EnvironmentName}","StreamlitLogsPolicyArn": "${StreamlitLogsPolicyArn}","StreamlitPublicSubnetA": "${PubSubnetA}","StreamlitPublicSubnetB": "${PubSubnetB}","StreamlitPrivateSubnetA": "${PvtSubnetA}","StreamlitPrivateSubnetB": "${PvtSubnetB}","LoggingBucketName": "${LoggingBucketName}","StreamlitVPC": "${VPC}"},
                  - {  
                      EnvironmentName: !Ref EnvironmentName,
                      Cluster: !If [IsDeployVPCInfrastructure, !GetAtt Infrastructure.Outputs.StreamlitCluster, !ImportValue StreamlitCluster],
                      StreamlitLogsPolicyArn: !If [IsDeployVPCInfrastructure, !GetAtt Infrastructure.Outputs.LogsPolicy, !ImportValue Basic-LogsPolicy],
                      PubSubnetA: !If [IsDeployVPCInfrastructure, !GetAtt Infrastructure.Outputs.PublicSubnetA, !ImportValue Basic-PublicSubnetA],
                      PubSubnetB: !If [IsDeployVPCInfrastructure, !GetAtt Infrastructure.Outputs.PublicSubnetB, !ImportValue Basic-PublicSubnetB],
                      PvtSubnetA: !If [IsDeployVPCInfrastructure, !GetAtt Infrastructure.Outputs.PrivateSubnetA, !ImportValue Basic-PrivateSubnetA],
                      PvtSubnetB: !If [IsDeployVPCInfrastructure, !GetAtt Infrastructure.Outputs.PrivateSubnetB, !ImportValue Basic-PrivateSubnetB],
                      LoggingBucketName: !If [IsDeployVPCInfrastructure, !GetAtt Infrastructure.Outputs.LoggingBucket, !ImportValue Basic-LoggingBucket],
                      VPC: !If [IsDeployVPCInfrastructure, !GetAtt Infrastructure.Outputs.VPC, !ImportValue Basic-VPC]
                   }
              RoleArn: 
                !GetAtt StreamlitCloudformationExecutionRole.Arn
              StackName: !Join ['', [!Sub '${AWS::StackName}', 'deploy', !Ref EnvironmentName]]
              TemplatePath: source-output-artifacts::deploy.yaml
            RunOrder: 1
        - Name: InvalidateCache
          Actions:
          - Name: Invalidate
            ActionTypeId:
              Category: Invoke
              Owner: AWS
              Version: 1
              Provider: Lambda
            InputArtifacts:
              - Name: cfn-output-artifacts
            Configuration:
              FunctionName: !Ref InvalidateCacheFunction
            RunOrder: 1             

  # CodePipeline without Infra
  StreamlitCodePipeLine:
    Type: AWS::CodePipeline::Pipeline
    Condition: NotDeployVPCInfrastructure
    DependsOn: StreamlitBuildCustomResource
    Properties:
      Name: !Join ['-', ['StreamlitCodePipeLine', !Ref EnvironmentName]]
      ArtifactStore: 
        Location: !Ref StreamlitArtifactStore
        Type: S3
      RestartExecutionOnUpdate: False
      RoleArn: !GetAtt StreamlitCodePipelineServiceRole.Arn
      Stages:
        - Name: Source
          Actions:
          - Name: SourceAction
            ActionTypeId:
              Category: Source
              Owner: AWS
              Provider: CodeCommit
              Version: 1
            Configuration:
              RepositoryName: !Ref RepoName
              BranchName: master
              PollForSourceChanges: false
            RunOrder: 1
            OutputArtifacts:
              - Name: source-output-artifacts              
        # Build the project using the BuildProject and Output build artifacts to build-output-artifacts path in S3 Bucket
        - Name: Build
          Actions:
          - Name: Build
            ActionTypeId:
              Category: Build
              Owner: AWS
              Version: 1
              Provider: CodeBuild
            OutputArtifacts:
              - Name: build-output-artifacts
            InputArtifacts:
              - Name: source-output-artifacts
            Configuration:
                ProjectName: !Ref StreamlitCodeBuild
            RunOrder: 1

        # Deploy the project by executing Fargate-Cluster.yml file in the Source code with Cloudformation.
        - Name: InfrastructureDeploy
          Actions:
          - Name: Deploy
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Version: 1
              Provider: CloudFormation
            InputArtifacts:
              - Name: source-output-artifacts
              - Name: build-output-artifacts
            OutputArtifacts:
              - Name: cfn-output-artifacts
            Configuration:
              OutputFileName: CreateStackOutput.json
              ActionMode: CREATE_UPDATE
              Capabilities: CAPABILITY_NAMED_IAM
              ParameterOverrides: !Sub 
                  - | 
                    {"StreamLitImageURI" : { "Fn::GetParam" : ["build-output-artifacts", "imageDetail.json", "StreamLitImageURI"] },"StreamlitCluster": "${Cluster}","EnvironmentName": "${EnvironmentName}","StreamlitLogsPolicyArn": "${StreamlitLogsPolicyArn}","StreamlitPublicSubnetA": "${PubSubnetA}","StreamlitPublicSubnetB": "${PubSubnetB}","StreamlitPrivateSubnetA": "${PvtSubnetA}","StreamlitPrivateSubnetB": "${PvtSubnetB}","LoggingBucketName": "${LoggingBucketName}","StreamlitVPC": "${VPC}"},
                  - {  
                      EnvironmentName: !Ref EnvironmentName,
                      Cluster: !If [IsDeployVPCInfrastructure, !GetAtt Infrastructure.Outputs.StreamlitCluster, !ImportValue StreamlitCluster],
                      StreamlitLogsPolicyArn: !If [IsDeployVPCInfrastructure, !GetAtt Infrastructure.Outputs.LogsPolicy, !ImportValue Basic-LogsPolicy],
                      PubSubnetA: !If [IsDeployVPCInfrastructure, !GetAtt Infrastructure.Outputs.PublicSubnetA, !ImportValue Basic-PublicSubnetA],
                      PubSubnetB: !If [IsDeployVPCInfrastructure, !GetAtt Infrastructure.Outputs.PublicSubnetB, !ImportValue Basic-PublicSubnetB],
                      PvtSubnetA: !If [IsDeployVPCInfrastructure, !GetAtt Infrastructure.Outputs.PrivateSubnetA, !ImportValue Basic-PrivateSubnetA],
                      PvtSubnetB: !If [IsDeployVPCInfrastructure, !GetAtt Infrastructure.Outputs.PrivateSubnetB, !ImportValue Basic-PrivateSubnetB],
                      LoggingBucketName: !If [IsDeployVPCInfrastructure, !GetAtt Infrastructure.Outputs.LoggingBucket, !ImportValue Basic-LoggingBucket],
                      VPC: !If [IsDeployVPCInfrastructure, !GetAtt Infrastructure.Outputs.VPC, !ImportValue Basic-VPC]
                   }
              RoleArn: 
                !GetAtt StreamlitCloudformationExecutionRole.Arn
              StackName: !Join ['', [!Sub '${AWS::StackName}', 'deploy', !Ref EnvironmentName]]
              TemplatePath: source-output-artifacts::deploy.yaml
            RunOrder: 1
        - Name: InvalidateCache
          Actions:
          - Name: Invalidate
            ActionTypeId:
              Category: Invoke
              Owner: AWS
              Version: 1
              Provider: Lambda
            InputArtifacts:
              - Name: cfn-output-artifacts
            Configuration:
              FunctionName: !Ref InvalidateCacheFunction
            RunOrder: 1             

  # CloudWatch
  StreamlitCloudWatchEventRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['-', ['CloudWatchEventRole', !Ref EnvironmentName]]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        -
          PolicyName: cwe-pipeline-execution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: !Join [ '', [ 'arn:aws:codepipeline:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Join ['-', ['StreamlitCodePipeLine', !Ref EnvironmentName]]] ]
            
  AmazonCloudWatchEventRule:
      Type: AWS::Events::Rule
      Properties:
        Name: !Join ['-', ['StreamlitEventRule', !Ref EnvironmentName]]
        EventPattern:
          source:
            - aws.codecommit
          detail-type:
            - 'CodeCommit Repository State Change'
          detail:
            event:
              - referenceCreated
              - referenceUpdated
            referenceType:
              - branch
            referenceName:
              - master
        Targets:
          -
            Arn:
              !Join [ '', [ 'arn:aws:codepipeline:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':',  !Join ['-', ['StreamlitCodePipeLine', !Ref EnvironmentName]]]]
            RoleArn: !GetAtt StreamlitCloudWatchEventRole.Arn
            Id: codepipeline-AppPipeline

Outputs:
  StreamlitCodeS3Bucket:
    Value: !Ref StreamlitCodeS3Bucket
    Description: Name of code S3 bucket